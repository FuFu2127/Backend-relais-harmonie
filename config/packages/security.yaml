security:
    password_hashers: # Configuration des algorithmes de hachage pour les mots de passe
        App\Entity\User: # Utilisation de l'algorithme de hachage pour les mots de passe des utilisateurs
            algorithm: auto # Utilisation de l'algorithme de hachage automatique pour les mots de passe des utilisateurs

    providers: # Définition des utilisateurs pour l'authentification
        app_user_provider: 
            entity:
                class: App\Entity\User # Classe de l'entité utilisateur
                property: email # Propriété utilisée pour identifier l'utilisateur (email)

    firewalls: # Définition des firewalls pour la sécurité de l'application
        # Firewall pour les routes publiques d'inscription et contact
        public: 
            pattern: ^/api/(register|contacts) # Chemin pour l'inscription et le contact
            stateless: true
            security: false # Désactive complètement la sécurité pour ces routes

        login: # Endpoint pour la connexion des utilisateurs
            pattern:  ^/api/login_check # Chemin pour la vérification de connexion
            stateless: true # Indique que ce firewall ne conserve pas l'état entre les requêtes
            json_login: # Utilisation de JSON pour l'authentification
                check_path:               /api/login_check # Chemin pour vérifier les informations d'identification
                username_path:            email # Chemin pour le nom d'utilisateur (email)
                password_path:            password # Chemin pour le mot de passe
                success_handler:          lexik_jwt_authentication.handler.authentication_success # Gestionnaire de succès pour l'authentification
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure # Gestionnaire d'échec pour l'authentification

        api:
            pattern:   ^/api/ # Toutes les autres routes de l'API
            stateless: true 
            jwt: ~ # Utilisation de JWT pour l'authentification

    access_control:
        # Routes publiques (ordre important - du plus spécifique au plus général)
        - { path: ^/api/login_check, roles: PUBLIC_ACCESS } # Login endpoint pour JWT authentication
        - { path: ^/api/register, roles: PUBLIC_ACCESS, methods: [POST] } # Endpoint pour l'enregistrement des utilisateurs
        - { path: ^/api/users, roles: PUBLIC_ACCESS, methods: [POST] } # Endpoint pour la création d'un utilisateur
        - { path: ^/api/contacts, methods: [POST], roles: PUBLIC_ACCESS } # Endpoint pour l'envoi de messages de contact
        - { path: ^/api/challenges, methods: [GET], roles: PUBLIC_ACCESS } # Endpoint pour récupérer les défis
        - { path: ^/api/acts, methods: [GET], roles: PUBLIC_ACCESS } # Endpoint pour récupérer les actes
        - { path: ^/api/users/\d+$, methods: [GET], roles: PUBLIC_ACCESS } # Endpoint pour récupérer un utilisateur spécifique
        - { path: ^/api/comments, methods: [GET], roles: PUBLIC_ACCESS } # Endpoint pour récupérer les commentaires
        
        # Routes protégées (doivent être après les routes publiques)
        - { path: ^/api/challenges, roles: IS_AUTHENTICATED_FULLY } # Endpoint pour les opérations sur les défis (POST, PUT, DELETE)
        - { path: ^/api/acts, roles: IS_AUTHENTICATED_FULLY } # Endpoint pour les opérations sur les actes (POST, PUT, DELETE)
        - { path: ^/api/comments, methods: [GET], roles: PUBLIC_ACCESS } # Endpoint pour récupérer les commentaires
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY } # Toutes les autres routes de l'API nécessitent une authentification complète
